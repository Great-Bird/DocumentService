[{"title":"Retry","type":0,"sectionRef":"#","url":"/DocumentService/api/Retry","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Retry","url":"/DocumentService/api/Retry#functions","content":" "},{"title":"Retry​","type":1,"pageTitle":"Retry","url":"/DocumentService/api/Retry#Retry","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Retry.Retry( maxAttempts: number,-- maximum attempts initialWait: number,-- waits (initialWait)^lastAttempt between attempts func: (T...) → S...,-- function to pcall ...: T... ) → ( success, ...-- if successful, the return values of func, otherwise an error string ) pcalls a function a number of times, returning the first success if any "},{"title":"DocumentStore","type":0,"sectionRef":"#","url":"/DocumentService/api/DocumentStore","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DocumentStore","url":"/DocumentService/api/DocumentStore#functions","content":" "},{"title":"new​","type":1,"pageTitle":"DocumentStore","url":"/DocumentService/api/DocumentStore#new","content":"&lt;/&gt; DocumentStore.new( dataStore: DataStore ,-- The object returned by DataStoreService:GetDataStore() check: (unknown) → ( boolean, T ),-- A type check function for your data, errors if types are invalid default: T-- Default values, which are set if keys are empty ) → DocumentStore Creates a new DocumentStore  "},{"title":"GetDocument​","type":1,"pageTitle":"DocumentStore","url":"/DocumentService/api/DocumentStore#GetDocument","content":"&lt;/&gt; DocumentStore.GetDocument( self: DocumentStore&lt;T&gt;, key: string ) → Document Gets the document for the key given, or creates one if it does not exist.  "},{"title":"isDocumentStore​","type":1,"pageTitle":"DocumentStore","url":"/DocumentService/api/DocumentStore#isDocumentStore","content":"&lt;/&gt; DocumentStore.isDocumentStore(instance: metatable) → isDocumentStore-- is it a DocumentStore Checks whether a metatable passed is a DocumentStore "},{"title":"Document","type":0,"sectionRef":"#","url":"/DocumentService/api/Document","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#new","content":"&lt;/&gt; Document.new( key: string, dataStore: DataStore ,-- A DataStore object check: (unknown) → ( boolean, T ),-- a function that take and returns a value, errors if the value provided does not match the type of data we expect default: T ) → Document&lt;T&gt; Creates a new Document class  "},{"title":"Open​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#Open","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Document.Open(self: Document&lt;T&gt;) → result Validates the document if one exists, or creates a default document if no document exists. You must call this method before reading or writing to a Document.  "},{"title":"Lock​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#Lock","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Document.Lock(self: Document&lt;T&gt;) → result Adds a session lock and enables auto-saves.  "},{"title":"Unlock​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#Unlock","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Document.Unlock(self: Document&lt;T&gt;) → result Removes a session lock  "},{"title":"Close​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#Close","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Document.Close(self: Document&lt;T&gt;) → result Makes the Document uneditable until it is re-opened  "},{"title":"Read​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#Read","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Document.Read(self: Document&lt;T&gt;) → result-- result containing the data read Reads from the DataStore, without caching  "},{"title":"Update​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#Update","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Document.Update( self: Document&lt;T&gt;, transform: Transform&lt;T&gt;-- transform function for the transaction ) → result-- result containing the new data Performs an atomic transaction on the Document  "},{"title":"HookBefore​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#HookBefore","content":"&lt;/&gt; Document.HookBefore( self: Document&lt;T&gt;, event: Types.PreHookEvent,-- the operation to call the hook before hook: ((Transform&lt;T&gt;) → Transform&lt;T&gt;) | (() → ())-- a hook function that receives the arguments passed in to the operation ) → () Attaches a hook which occurs before the event. Note that if a hook yields, it will yield all methods that call it. Hooks are called in the order they are added. Explicitly annotate the transform type with DocumentService.Transform to avoid luau typechecking limitations.  "},{"title":"HookAfter​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#HookAfter","content":"&lt;/&gt; Document.HookAfter( self: Document&lt;T&gt;, event: Types.PostHookEvent,-- the operation to call the hook after hook: (Result&lt;T&gt;) → Result&lt;T&gt;-- a hook function that receives the arguments passed in to the operation ) → () Attaches a hook which occurs after the event, before the method returns. Note that if a hook yields, it will yield all methods that call it. Hooks are called in the order they are added.  "},{"title":"SetLockedHandler​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#SetLockedHandler","content":"&lt;/&gt; Document.SetLockedHandler( self: Document&lt;T&gt;, handler: ( lockId: string?, timestamp: number ) → Types.LockedResponse ) → () Sets the function which determines how to respond to a session lock while opening a Document.  "},{"title":"SetInvalidDataHandler​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#SetInvalidDataHandler","content":"&lt;/&gt; Document.SetInvalidDataHandler( self: Document&lt;T&gt;, handler: (invalidData: unknown) → Result&lt;T&gt; ) → () Sets the function which responds to invalid data while opening a Document. This can migrate data (by returning a successful result with new data), or fail.  "},{"title":"Destroy​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#Destroy","content":"&lt;/&gt; Document.Destroy(self: Document&lt;T&gt;) → () Closes and destroys the class  "},{"title":"__tostring​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#__tostring","content":"&lt;/&gt; Document.__tostring(self: Document&lt;T&gt;) → () For debug printing documents  "},{"title":"isDocument​","type":1,"pageTitle":"Document","url":"/DocumentService/api/Document#isDocument","content":"&lt;/&gt; Document.isDocument(instance: metatable) → isDocument-- is it a Document Checks whether a metatable passed is a Document "}]