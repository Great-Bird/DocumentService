"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||a;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={sidebar_position:1},i="Introduction",l={unversionedId:"intro",id:"intro",title:"Introduction",description:"DocumentService is a fully strictly typed Luau library for saving data with Roblox DataStores.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/DocumentService/docs/intro",draft:!1,editUrl:"https://github.com/anthony0br/DocumentService/edit/main/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",next:{title:"Installation",permalink:"/DocumentService/docs/installation"}},s={},c=[{value:"Features",id:"features",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"DocumentService is a fully strictly typed Luau library for saving data with Roblox DataStores."),(0,o.kt)("p",null,"DocumentService provides a DataStore abstraction, DocumentStore, which holds data about entities within Documents."),(0,o.kt)("p",null,"A document can represent data about anything - e.g. a player, a group, or a virtual house shared between players."),(0,o.kt)("p",null,"DocumentStores can be session-locked or not session-locked. DocumentStores which aren't session locked\nare designed to be used for shared data which needs multiple-server editing. This will disable some methods,\nsuch as caching - you should write directly to the DataStore every time you make an update. You should use\nsession locking where you can to take full advantage of the library."),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Fully strictly typed. This means you get full intellisense and typechecking on your data,\nand on every API method, including possible errors for each method."),(0,o.kt)("li",{parentName:"ul"},"Superior Rust-inspired error handling, with each Result for each method\nproviding unique intellisense on which errors you need to handle."),(0,o.kt)("li",{parentName:"ul"},"Immutable cache and autosaves - preventing bugs caused by updates interfering with eachother."),(0,o.kt)("li",{parentName:"ul"},"Migrations, inspired by nezuo's Lapis."),(0,o.kt)("li",{parentName:"ul"},"Validate your data with support for runtime and static typechecking."),(0,o.kt)("li",{parentName:"ul"},"Documents can be session-locked, or not (to allow multi-server editing)."),(0,o.kt)("li",{parentName:"ul"},"Run hooks before and after operations, e.g. logging."),(0,o.kt)("li",{parentName:"ul"},"Automatic retry with exponential backoff."),(0,o.kt)("li",{parentName:"ul"},"Migrate from no library, or another library if you're brave."),(0,o.kt)("li",{parentName:"ul"},"Checks your data can be stored in JSON to avoid silent errors."),(0,o.kt)("li",{parentName:"ul"},"Simple API that follows SOLID principles: session-locking a document simply extends the API.\nFor example, in ProfileService you need to provide a lockedHandler function, which changes the\nbehaviour of the method to open a Profile, but in DocumentService you can just use the\nwith ",(0,o.kt)("inlineCode",{parentName:"li"},":IsWriteAvailable")," and ",(0,o.kt)("inlineCode",{parentName:"li"},":Steal")," methods if you need them."),(0,o.kt)("li",{parentName:"ul"},"Maintainable, strictly typed source code, that is actively maintained."),(0,o.kt)("li",{parentName:"ul"},"No dependencies (like Promise). Use whatever abstractions you like, and install easily.")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/anthony0br/DocumentService/blob/v1.0.0-rc.9/README.md"},"README.md")," for more."))}p.isMDXComponent=!0}}]);