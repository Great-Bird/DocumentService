"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[331],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=o,y=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},76647:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={},i="DocumentService",l={type:"mdx",permalink:"/DocumentService/",source:"@site/pages/index.md",title:"DocumentService",description:"Goals",frontMatter:{}},c=[{value:"Goals",id:"goals",level:2},{value:"Non-goals:",id:"non-goals",level:2}],s={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"documentservice"},"DocumentService"),(0,o.kt)("h2",{id:"goals"},"Goals"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Fully strictly typed, working now: DocumentService is fully strictly typed, including internally and the public API, and checks types at runtime."),(0,o.kt)("li",{parentName:"ul"},"Adaptable with hooks. For example, these can be used for automated logging."),(0,o.kt)("li",{parentName:"ul"},"Few dependencies and simple API: DocumentService will not lock you into using a specific implementation of Promise or Future. Instead, it just yields when it needs to, and lets you implement your own async behaviour."),(0,o.kt)("li",{parentName:"ul"},"Transaction based API as the core, auto-saving for rapidly changing data can be added on later"),(0,o.kt)("li",{parentName:"ul"},"Safe transactions involving multiple keys (e.g. trades)"),(0,o.kt)("li",{parentName:"ul"},"Automatic retry"),(0,o.kt)("li",{parentName:"ul"},"Optional session-locking - this can be turned off easily (e.g. for modifying data about groups)"),(0,o.kt)("li",{parentName:"ul"},"Lets you use your own async handlers - I recommend Redblox Futures.")),(0,o.kt)("h2",{id:"non-goals"},"Non-goals:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Caching. I don't intend (yet) to re-implement the features of every existing DataStore library which provide a table that is auto-saved and saved on close is not a priority, and this wouldn't work for documents that aren't session locked. For now, if you need to cache just do it yourself: call Update periodically and on close."),(0,o.kt)("li",{parentName:"ul"},"Queue transactions. UpdateAsync apparently garuantees the order of transactions."),(0,o.kt)("li",{parentName:"ul"},"Make Promises. We can't type check these, yet, so I want to provide the option to use other async handling methods.")),(0,o.kt)("p",null,"If you think I could achieve these goals better please open an Issue or contact me!"))}p.isMDXComponent=!0}}]);