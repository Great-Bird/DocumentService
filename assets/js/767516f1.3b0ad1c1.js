"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[556],{57159:e=>{e.exports=JSON.parse('{"functions":[],"properties":[],"types":[{"name":"PreHookEvent","desc":"Runs before the operation, transforming parameters.\\n\\n:::info\\nUpdate hooks will run on any operation that saves the datastore e.g. :Save()\\n:::","lua_type":"\\"Open\\" | \\"Close\\" | \\"Update\\" | \\"Read\\"","source":{"line":14,"path":"src/Types.luau"}},{"name":"PostHookEvent","desc":"Runs after the operation, transforming the return value.\\n\\n:::info\\nUpdate hooks will run on any operation that saves the datastore e.g. :Save()\\n:::","lua_type":"\\"Open\\" | \\"Close\\" | \\"Update\\" | \\"Read\\"","source":{"line":27,"path":"src/Types.luau"}},{"name":"FailReason","desc":"A reason an operation failed, but didn\'t throw an error. These are typically reasons that may\\nnot be your fault and you should check for and handle them.","lua_type":"\\"RobloxAPIFail\\" | \\"SessionLocked\\" | \\"CheckFailed\\" | \\"NotBackwardsCompatible\\"","source":{"line":37,"path":"src/Types.luau"}},{"name":"Result<T>","desc":"The result of a yielding operation.","lua_type":"({ success: true, data: T } | { success: false, failReason: FailReason, errorMessage: string, data: nil })","source":{"line":46,"path":"src/Types.luau"}},{"name":"Migrations<T>","desc":"Data format versions start at 0. The first migration should migrate from 0 to 1.\\n\\nIf you have data existing in the key before you open a Document, this will be considered version 0 and migrations will run.\\n\\nIf backwardsCompatible is false, loading this version and later versions in an older server without this migration defined will fail.\\n\\nThe current version is defined by the length of this array.","lua_type":"{ { backwardsCompatible: boolean, migrate: (data: any) -> any, } }","source":{"line":70,"path":"src/Types.luau"}},{"name":"Transform<T>","desc":"Takes data and returns an updated version of it.\\nIdeally this should be a pure function.","lua_type":"(data: T) -> T","source":{"line":85,"path":"src/Types.luau"}}],"name":"DocumentService","desc":"Namespace containing public classes and types for DocumentService.\\n\\nContains the classes `DocumentService.DocumentStore` and `DocumentService.Util`.\\n\\nExample\\n```lua\\n\\tlocal DocumentStore = require(path/to/documentservice).DocumentStore\\n\\tlocal store = DocumentStore.new(...)\\n```","source":{"line":32,"path":"src/init.luau"}}')}}]);