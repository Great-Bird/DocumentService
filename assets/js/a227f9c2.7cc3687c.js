"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[972],{24936:e=>{e.exports=JSON.parse('{"functions":[{"name":"new","desc":"Creates a new Document class","params":[{"name":"key","desc":"","lua_type":"string"},{"name":"dataStore","desc":"","lua_type":"DataStore"},{"name":"check","desc":"a function that take and returns a value, errors if the value provided does not match the type of data we expect","lua_type":"(value: unknown) -> T"},{"name":"default","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"Document<T>\\n"}],"function_type":"static","source":{"line":62,"path":"src/DocumentService/Document.luau"}},{"name":"Open","desc":"Validates and session locks the document, making it ready for use\\n\\nThis can heavily yield due to re-tries","params":[{"name":"self","desc":"","lua_type":"Document<T>"}],"returns":[{"desc":"","lua_type":"result"}],"function_type":"static","yields":true,"source":{"line":108,"path":"src/DocumentService/Document.luau"}},{"name":"Lock","desc":"Adds a session lock","params":[{"name":"self","desc":"","lua_type":"Document<T>"}],"returns":[{"desc":"","lua_type":"result"}],"function_type":"static","yields":true,"source":{"line":132,"path":"src/DocumentService/Document.luau"}},{"name":"Unlock","desc":"Removes a session lock","params":[{"name":"self","desc":"","lua_type":"Document<T>"}],"returns":[{"desc":"","lua_type":"result"}],"function_type":"static","yields":true,"source":{"line":147,"path":"src/DocumentService/Document.luau"}},{"name":"Close","desc":"Makes the Document uneditable until it is re-opened","params":[{"name":"self","desc":"","lua_type":"Document<T>"}],"returns":[{"desc":"","lua_type":"result"}],"function_type":"static","yields":true,"source":{"line":162,"path":"src/DocumentService/Document.luau"}},{"name":"Read","desc":"Reads","params":[{"name":"self","desc":"","lua_type":"Document<T>"},{"name":"cache","desc":"if this is false, it will disable Roblox\'s GetAsync caching","lua_type":"boolean"}],"returns":[{"desc":"result containing the data read","lua_type":"result"}],"function_type":"static","yields":true,"source":{"line":181,"path":"src/DocumentService/Document.luau"}},{"name":"Update","desc":"Performs a single atomic transaction on the Document","params":[{"name":"self","desc":"","lua_type":"Document<T>"},{"name":"transform","desc":"transform function for the transaction","lua_type":"(data: T) -> T"}],"returns":[{"desc":"result containing the new data","lua_type":"result"}],"function_type":"static","yields":true,"source":{"line":196,"path":"src/DocumentService/Document.luau"}},{"name":"UpdateWith","desc":"A joint atomic transaction involving this document, and another document.\\n\\nIf either update fails, both keys will be restored to their oirginal state.","params":[{"name":"self","desc":"","lua_type":"Document<T>"},{"name":"otherDocument","desc":"the source of otherData","lua_type":"Document<S>"},{"name":"transform","desc":"transform function for the transaction","lua_type":"(data: T, otherData: S) -> (T, S)\\n"}],"returns":[{"desc":"true if no errors that we cannot control occur (i.e. datastore errors)","lua_type":"success"},{"desc":"the error that occurred","lua_type":"error"}],"function_type":"static","yields":true,"source":{"line":223,"path":"src/DocumentService/Document.luau"}},{"name":"PreHook","desc":"Attaches a hook which occurs before the event.\\n\\nNote that if a hook yields, it will yield all methods that call it. Hooks are called in the order\\nthey are added.","params":[{"name":"self","desc":"","lua_type":"Document<T>"},{"name":"event","desc":"the operation to call the hook before","lua_type":"Types.PreHookEvent"},{"name":"hook","desc":"a hook function that receives the arguments passed in to the operation","lua_type":"(S...) -> ()"}],"returns":[],"function_type":"static","source":{"line":243,"path":"src/DocumentService/Document.luau"}},{"name":"PostHook","desc":"Attaches a hook which occurs after the event, before the method returns.\\n\\nNote that if a hook yields, it will yield all methods that call it. Hooks are called in the order\\nthey are added.","params":[{"name":"self","desc":"","lua_type":"Document<T>"},{"name":"event","desc":"the operation to call the hook after","lua_type":"Types.PostHookEvent"},{"name":"hook","desc":"a hook function that receives the arguments passed in to the operation","lua_type":"(Result<T>) -> ()"}],"returns":[],"function_type":"static","source":{"line":256,"path":"src/DocumentService/Document.luau"}},{"name":"SetLockedHandler","desc":"Sets the function which determines how to respond to a session lock while opening a Document.","params":[{"name":"self","desc":"","lua_type":"Document<T>"},{"name":"handler","desc":"","lua_type":"(lockId: string?, timestamp: number) -> Types.LockedResponse\\n"}],"returns":[],"function_type":"static","source":{"line":265,"path":"src/DocumentService/Document.luau"}},{"name":"SetInvalidDataHandler","desc":"Sets the function which responds to invalid data while opening a Document.\\n\\nThis can migrate data (by returning a successful result with new data), or fail.","params":[{"name":"self","desc":"","lua_type":"Document<T>"},{"name":"handler","desc":"","lua_type":"(invalidData: unknown) -> Result<T>"}],"returns":[],"function_type":"static","source":{"line":279,"path":"src/DocumentService/Document.luau"}},{"name":"Destroy","desc":"Closes and destroys the class","params":[{"name":"self","desc":"","lua_type":"Document<T>"}],"returns":[],"function_type":"static","source":{"line":286,"path":"src/DocumentService/Document.luau"}},{"name":"__tostring","desc":"For debug printing documents","params":[{"name":"self","desc":"","lua_type":"Document<T>"}],"returns":[],"function_type":"static","source":{"line":297,"path":"src/DocumentService/Document.luau"}},{"name":"isDocument","desc":"Checks whether a metatable passed is a Document","params":[{"name":"instance","desc":"","lua_type":"metatable"}],"returns":[{"desc":"is it a Document","lua_type":"isDocument"}],"function_type":"static","source":{"line":307,"path":"src/DocumentService/Document.luau"}}],"properties":[],"types":[],"name":"Document","desc":"","source":{"line":12,"path":"src/DocumentService/Document.luau"}}')}}]);